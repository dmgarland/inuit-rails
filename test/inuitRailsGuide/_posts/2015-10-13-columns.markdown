---
layout: post
title: "Layout"
categories: css responsive inuit
---

In this post we will look at some examples of how to control layout.

1. Frequently when transitioning to mobile devices it is desirable to collapse a
series of horizontally spaced elements into a single vertical stack. (To view the
properties of the CSS classes and the responsive change with respect to screen
width please open the web inspector).

{% include grid_example1.html %}

{% highlight html %}
<div class="parent layout layout--center u-1/1-lap-and-up u-1/2-palm offset-col-1/4-palm">
  <div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">1</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">2</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">3</p>
  </div>
</div>
{% endhighlight %}

The location of these classes within the Inuit-WGC source code are as follows:

`layout`, `layout--center`, `layout__item` are defined in _objects.layout.scss

NOTE: layout--center has been modified from its original version in Inuit CSS
to allow for central text positioning with t-center and making up the remaining
12px required to truly center its contents.

`u-1/1-lap-and-up`. `u-1/2-palm` etc... and `offset-col-1/4-palm` are all built
from combining Sass structures that are defined in _settings.responsive.scss,
_tools.responsive.scss, _tools.widths.scss and _trumps.widths-responsive.scss.
All these files must be acknowledged to understand any one of these classes in
isolation.

NOTE: the addition of the offset-col-... classes is a modification of the
original Inuit CSS source.

`palm-mv` and friends are defined in _trumps.spacing-responsive.scss which again
depends on _settings.responsive.scss for defining the responsive breakpoints.

It's great to know how to use the Inuit-WGC source on demand, but more important
is understanding the approach to this markup and therefore being able to build
up an equivalent (or better) example yourself from scratch.

Here's the example and markup again:

{% include grid_example1.html %}

{% highlight html %}
<div class="parent layout layout--center u-1/1-lap-and-up u-1/2-palm offset-col-1/4-palm">
  <div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">1</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">2</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">3</p>
  </div>
</div>
{% endhighlight %}

The `child` divs ('siblings' of each other) are all inline-block elements by
virtue of the `layout__item` class, this means that they are inline elements in
that they do not automatically fill the width of their container, but unlike
normal inline elements such as `<span>` they impart height onto their parent.
This ability to impart height on their parent is an intrinsic property of block
elements such as `<p>` and `<div>`.

The advantage of this is that like floated elements they are part of the 'flow'
of the page, and therefore text will flow around them. However, floated elements
do not impart any height on their parent container and so cases where floated
elements are used must be resolved with the clearfix hack.

One potentially rather annoying thing however about inline-block elements is
that they have a default whitespace between them, which can mess up the nice
even spacings provided by columns since the extra spaces push the last element
outside its column, forcing it to wrap onto the next line.

One of many possible solutions to this problem that has been chosen here, is to
place comment tags between siblings in the manner shown above (and below) as
this strips the whitespace which would otherwise occupy that space.

{% include grid_example1.html %}

{% highlight html %}
<div class="parent layout layout--center u-1/1-lap-and-up u-1/2-palm offset-col-1/4-palm">
  <div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">1</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">2</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">3</p>
  </div>
</div>
{% endhighlight %}

So moving on to columns. Columns are what you would end up realising you needed
if you had just built your own visual design in, say photoshop, and were
trying to translate it into HTML and CSS that would behave the way you want. Put
simply they are just the width of the page you want a certain element to occupy
expressed, hopefully, as a percentage of the total width of its container. By
default block elements will fill 100% of that width, where inline elements only
fill as much width as is imparted to them by their content, e.g. text, an image.
Both of these can of course be over-ridden by setting the width property on a
class and declaring that class on the given element.

The reason for specifying the width as a relative quantity, i.e. a percentage
is to ensure that the pattern in which the space is distributed remains exactly
the same no matter what the actual, absolute, width of the screen is.

{% include grid_example1.html %}

{% highlight html %}
<div class="parent layout layout--center u-1/1-lap-and-up u-1/2-palm offset-col-1/4-palm">
  <div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">1</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">2</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">3</p>
  </div>
</div>
{% endhighlight %}

One can go a step further than keeping the distribution of space the same over
all widths by changing it deliberately to a new pattern depending on the current
width of the screen, as has been done here! It is achieved by specifying a media
query which governs whether or not a particular class has any effect for a given
screen width.

In the example shown here after the screen width drops below 45em the
u-1/1-lap-and-up class ceases to have any effect and the u-1/2-palm takes over
the width of the parent div changes from 100% to 50% of its container and is
offset to the right by 25% to keep it centered (this is good practice, one
should NOT use an empty column of width 25% as this adds no semantic value to
the document). The child divs now fill 100% of their parents widths and
therefore are stacked vertically. By default they would sit flush on top of each
other so the `palm-mv--` class ensures that there is some margin separating each
one.

{% include grid_example1.html %}

{% highlight html %}
<div class="parent layout layout--center u-1/1-lap-and-up u-1/2-palm offset-col-1/4-palm">
  <div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">1</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">2</p>
  </div><!--

  --><div class="child layout__item u-1/3-lap-and-up u-1/1-palm palm-mv--">
    <p class="bg-black c-white t-center">3</p>
  </div>
</div>
{% endhighlight %}

As a final point it is worth explaining how the guttering (spacing between
columns) has been achieved. The `layout` class adds a negative margin-left equal
to the base-spacing-unit defined in _settings.defaults.scss (this is re-used
again and again and again in the Inuit framework to keep things DRY and
consistent!). This effectively pulls the parent div (and all it's children)
outside of its parent by 24px to the left. The `layout__item` class then gives
all the child divs an extra 24px padding to the left so the the content of the
left-most div is flush with its parent on the left-hand-side (or it would do if
the `layout--center` class didn't halve the original margin left to ensure
the child devs are truly centred!). Therefore the content of each child div - in
this case a `<p>` tag containing a number - is displaced 24px to the right
creating a separation between the `<p>`s (NOT the `<div>`s!).
